From 78bf348f1f8213b5d94ddd66c9dd5f8b349756c1 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Sat, 9 May 2020 17:05:32 +0800
Subject: [PATCH 1/3] qwaylanddisplay: Wakeup main event dispatcher when events
 pending

The socket might not be able to generate poll events to wakeup the main
event dispatcher when there're multiple wayland clients(e.g. waylandsink)
reading it.

So let's create a extra thread to check the wayland display event queue
for pending events and wakeup the main event dispatcher.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 src/client/qwaylanddisplay.cpp | 65 +++++++++++++++++++++++++++++++++-
 src/client/qwaylanddisplay_p.h |  2 ++
 2 files changed, 66 insertions(+), 1 deletion(-)

diff --git a/src/client/qwaylanddisplay.cpp b/src/client/qwaylanddisplay.cpp
index 437501f..2f5dd9d 100644
--- a/src/client/qwaylanddisplay.cpp
+++ b/src/client/qwaylanddisplay.cpp
@@ -73,6 +73,8 @@
 
 #include <QtCore/QDebug>
 
+#include <QThread>
+
 #include <errno.h>
 #include <poll.h>
 
@@ -80,6 +82,62 @@ QT_BEGIN_NAMESPACE
 
 namespace QtWaylandClient {
 
+class QWaylandDisplayThread : public QThread
+{
+public:
+    QWaylandDisplayThread(struct wl_display *display);
+    ~QWaylandDisplayThread();
+
+protected:
+    virtual void run() override;
+
+private:
+    struct wl_display *mDisplay = nullptr;
+    bool quit = false;
+};
+
+QWaylandDisplayThread::QWaylandDisplayThread(struct wl_display *display)
+    : mDisplay(display)
+{
+    start();
+}
+
+QWaylandDisplayThread::~QWaylandDisplayThread()
+{
+    quit = true;
+    wait(1000);
+}
+
+void QWaylandDisplayThread::run()
+{
+    struct pollfd fd;
+    int ret;
+
+    fd.fd = wl_display_get_fd(mDisplay);
+    fd.events = POLLIN | POLLERR | POLLHUP;
+
+    while (!quit) {
+        /* wakeup dispatcher for pending events */
+        while (wl_display_prepare_read(mDisplay) != 0) {
+            if (auto *dispatcher = QCoreApplication::eventDispatcher())
+                dispatcher->wakeUp();
+            usleep(1000);
+            continue;
+        }
+
+        ret = poll(&fd, 1, -1);
+        if (ret > 0 && fd.revents & POLLIN)
+            wl_display_read_events(mDisplay);
+        else
+            wl_display_cancel_read(mDisplay);
+
+        if (wl_display_get_error(mDisplay) != 0)
+            break;
+
+        wl_display_flush(mDisplay);
+    }
+}
+
 struct wl_surface *QWaylandDisplay::createSurface(void *handle)
 {
     struct wl_surface *surface = mCompositor.create_surface();
@@ -153,6 +211,8 @@ QWaylandDisplay::QWaylandDisplay(QWaylandIntegration *waylandIntegration)
 
     mWindowManagerIntegration.reset(new QWaylandWindowManagerIntegration(this));
 
+    mThread = new QWaylandDisplayThread(mDisplay);
+
     forceRoundTrip();
 }
 
@@ -168,7 +228,10 @@ QWaylandDisplay::~QWaylandDisplay(void)
 #if QT_CONFIG(wayland_datadevice)
     delete mDndSelectionHandler.take();
 #endif
-    wl_display_disconnect(mDisplay);
+    if (mDisplay) {
+        delete mThread;
+        wl_display_disconnect(mDisplay);
+    }
 }
 
 void QWaylandDisplay::checkError() const
diff --git a/src/client/qwaylanddisplay_p.h b/src/client/qwaylanddisplay_p.h
index d81d5fa..2f4965c 100644
--- a/src/client/qwaylanddisplay_p.h
+++ b/src/client/qwaylanddisplay_p.h
@@ -100,6 +100,7 @@ class QWaylandIntegration;
 class QWaylandHardwareIntegration;
 class QWaylandXdgShell;
 class QWaylandShellSurface;
+class QWaylandDisplayThread;
 
 typedef void (*RegistryListener)(void *data,
                                  struct wl_registry *registry,
@@ -227,6 +228,7 @@ private:
     QVector<QWaylandWindow *> mActiveWindows;
     struct wl_callback *mSyncCallback;
     static const wl_callback_listener syncCallbackListener;
+    QWaylandDisplayThread *mThread = nullptr;
 
     void registry_global(uint32_t id, const QString &interface, uint32_t version) override;
     void registry_global_remove(uint32_t id) override;
-- 
2.20.1

