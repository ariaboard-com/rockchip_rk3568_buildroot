From 6adfb181dcbe18b4fde3bf6b434cb59125405110 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Fri, 22 May 2020 11:39:00 +0800
Subject: [PATCH 29/30] HACK: pixman-renderer: Support mali egl client and egl
 buffer attaching

The mali clients requires mali_buffer_sharing extension, and it needs
lots of hacks to attach a wl_buffer created in that way.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 Makefile.am                 |   4 +
 libweston/pixman-renderer.c | 178 ++++++++++++++++++++++++++++++++++++
 2 files changed, 182 insertions(+)

diff --git a/Makefile.am b/Makefile.am
index 7686e7b..73d3b97 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -116,6 +116,10 @@ libweston_@LIBWESTON_MAJOR@_la_SOURCES =			\
 	shared/platform.h				\
 	shared/weston-egl-ext.h
 
+if ENABLE_EGL
+libweston_@LIBWESTON_MAJOR@_la_LIBADD += $(EGL_LIBS) $(DRM_COMPOSITOR_GBM_LIBS)
+endif
+
 lib_LTLIBRARIES += libweston-desktop-@LIBWESTON_MAJOR@.la
 libweston_desktop_@LIBWESTON_MAJOR@_la_CPPFLAGS = $(AM_CPPFLAGS) -DIN_WESTON
 libweston_desktop_@LIBWESTON_MAJOR@_la_CFLAGS = $(AM_CFLAGS) $(COMPOSITOR_CFLAGS)
diff --git a/libweston/pixman-renderer.c b/libweston/pixman-renderer.c
index 4d736dc..aaed8f9 100644
--- a/libweston/pixman-renderer.c
+++ b/libweston/pixman-renderer.c
@@ -45,6 +45,18 @@
 
 #include <linux/input.h>
 
+#ifdef ENABLE_EGL
+#include <fcntl.h>
+#include <sys/stat.h>
+
+#include <gbm.h>
+#include <EGL/egl.h>
+#include <EGL/eglext.h>
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+#include "weston-egl-ext.h"  /* for PFN* stuff */
+#endif
+
 struct pixman_output_state {
 	void *shadow_buffer;
 	pixman_image_t *shadow_image;
@@ -70,6 +82,18 @@ struct pixman_renderer {
 	struct weston_binding *debug_binding;
 
 	struct wl_signal destroy_signal;
+
+#ifdef ENABLE_EGL
+	PFNEGLBINDWAYLANDDISPLAYWL bind_display;
+	PFNEGLUNBINDWAYLANDDISPLAYWL unbind_display;
+	PFNEGLQUERYWAYLANDBUFFERWL query_buffer;
+	EGLDisplay egl_display;
+
+	int drm_fd;
+	struct gbm_device *gbm;
+
+	bool egl_inited;
+#endif
 };
 
 struct dmabuf_data {
@@ -77,6 +101,16 @@ struct dmabuf_data {
 	size_t size;
 };
 
+#ifdef ENABLE_EGL
+/* HACK: For mali_buffer_sharing */
+struct egl_buffer_info {
+	int dma_fd;
+	int width;
+	int height;
+	unsigned int stride;
+};
+#endif
+
 static inline struct pixman_output_state *
 get_output_state(struct weston_output *output)
 {
@@ -676,11 +710,16 @@ pixman_renderer_attach_dmabuf(struct weston_surface *es,
 static void
 pixman_renderer_attach(struct weston_surface *es, struct weston_buffer *buffer)
 {
+	struct pixman_renderer *pr = get_renderer(es->compositor);
 	struct pixman_surface_state *ps = get_surface_state(es);
 	struct wl_shm_buffer *shm_buffer;
 	struct linux_dmabuf_buffer *dmabuf;
 	pixman_format_code_t pixman_format;
 
+#ifdef ENABLE_EGL
+	EGLint format;
+#endif
+
 	weston_buffer_reference(&ps->buffer_ref, buffer);
 
 	if (ps->buffer_destroy_listener.notify) {
@@ -702,7 +741,57 @@ pixman_renderer_attach(struct weston_surface *es, struct weston_buffer *buffer)
 		if ((dmabuf = linux_dmabuf_buffer_get(buffer->resource))) {
 			pixman_renderer_attach_dmabuf(es, buffer, dmabuf);
 			return;
+#ifdef ENABLE_EGL
+		} else if (pr->egl_inited &&
+			   pr->query_buffer(pr->egl_display,
+					    (void *)buffer->resource,
+					    EGL_TEXTURE_FORMAT, &format)){
+			struct egl_buffer_info *info;
+			struct linux_dmabuf_buffer dmabuf = { 0 };
+			struct dmabuf_attributes *attributes =
+				&dmabuf.attributes;
+			struct stat s;
+			int width, height;
+
+			pr->query_buffer(pr->egl_display,
+					 (void *)buffer->resource,
+					 EGL_WIDTH, &width);
+			pr->query_buffer(pr->egl_display,
+					 (void *)buffer->resource,
+					 EGL_HEIGHT, &height);
+
+			info = wl_resource_get_user_data(buffer->resource);
+			if (!info)
+				goto err;
+
+			if (fstat(info->dma_fd, &s) < 0 ||
+			    info->width != width || info->height != height)
+				goto err;
+
+			switch (format) {
+			case EGL_TEXTURE_RGB:
+				attributes->format = DRM_FORMAT_RGB888;
+				break;
+			case EGL_TEXTURE_RGBA:
+				attributes->format = DRM_FORMAT_ARGB8888;
+				break;
+			default:
+				goto err;
+			}
+
+			attributes->n_planes = 1;
+			attributes->fd[0] = info->dma_fd;
+			attributes->width = info->width;
+			attributes->height = info->height;
+			attributes->stride[0] = info->stride;
+
+			pixman_renderer_attach_dmabuf(es, buffer, &dmabuf);
+			return;
 		} else {
+err:
+#else
+		} else {
+#endif
 			weston_log("unhandled buffer type!\n");
 			weston_buffer_reference(&ps->buffer_ref, NULL);
 			return;
@@ -854,6 +943,21 @@ pixman_renderer_destroy(struct weston_compositor *ec)
 {
 	struct pixman_renderer *pr = get_renderer(ec);
 
+#ifdef ENABLE_EGL
+	if (pr->egl_inited) {
+		if (pr->unbind_display)
+			pr->unbind_display(pr->egl_display, ec->wl_display);
+
+		eglTerminate(pr->egl_display);
+		eglReleaseThread();
+
+		if (pr->gbm)
+			gbm_device_destroy(pr->gbm);
+
+		close(pr->drm_fd);
+	}
+#endif
+
 	wl_signal_emit(&pr->destroy_signal, pr);
 	weston_binding_destroy(pr->debug_binding);
 	free(pr);
@@ -1036,6 +1140,76 @@ pixman_renderer_query_dmabuf_modifiers(struct weston_compositor *wc,
 	return true;
 }
 
+#ifdef ENABLE_EGL
+static bool
+pixman_renderer_init_egl(struct pixman_renderer *pr,
+			 struct weston_compositor *ec)
+{
+	PFNEGLGETPLATFORMDISPLAYEXTPROC get_platform_display;
+
+	get_platform_display =
+		(void *) eglGetProcAddress("eglGetPlatformDisplayEXT");
+	pr->query_buffer =
+		(void *) eglGetProcAddress("eglQueryWaylandBufferWL");
+	pr->bind_display =
+		(void *) eglGetProcAddress("eglBindWaylandDisplayWL");
+	pr->unbind_display =
+		(void *) eglGetProcAddress("eglUnbindWaylandDisplayWL");
+
+	if (!get_platform_display || !pr->query_buffer ||
+	    !pr->bind_display || !pr->unbind_display) {
+		weston_log("Failed to get egl proc\n");
+		return false;
+	}
+
+	pr->drm_fd = open("/dev/dri/card0", O_RDWR | O_CLOEXEC);
+	if (pr->drm_fd < 0) {
+		weston_log("Failed to open drm dev\n");
+		return false;
+	}
+
+	pr->gbm = gbm_create_device(pr->drm_fd);
+	if (!pr->gbm) {
+		weston_log("Failed to create gbm device\n");
+		goto err_close_fd;
+	}
+
+	pr->egl_display = get_platform_display(EGL_PLATFORM_GBM_KHR,
+					       (void*) pr->gbm, NULL);
+	if (pr->egl_display == EGL_NO_DISPLAY) {
+		weston_log("Failed to create egl display\n");
+		goto err_destroy_gbm;
+	}
+
+
+	if (!eglInitialize(pr->egl_display, NULL, NULL)) {
+		weston_log("Failed to initialize egl\n");
+		goto err_terminate_display;
+	}
+
+	if (!eglBindAPI(EGL_OPENGL_ES_API)) {
+		weston_log("Failed to bind api\n");
+		goto err_terminate_display;
+	}
+
+	if (!pr->bind_display(pr->egl_display, ec->wl_display))
+		goto err_terminate_display;
+
+	pr->egl_inited = true;
+	return true;
+
+err_terminate_display:
+	eglTerminate(pr->egl_display);
+err_destroy_gbm:
+	gbm_device_destroy(pr->gbm);
+	pr->gbm = NULL;
+err_close_fd:
+	close(pr->drm_fd);
+	pr->drm_fd = -1;
+	return false;
+}
+#endif
+
 WL_EXPORT int
 pixman_renderer_init(struct weston_compositor *ec)
 {
@@ -1084,6 +1258,10 @@ pixman_renderer_init(struct weston_compositor *ec)
 	renderer->base.query_dmabuf_modifiers =
 	    pixman_renderer_query_dmabuf_modifiers;
 
+#ifdef ENABLE_EGL
+	pixman_renderer_init_egl(renderer, ec);
+#endif
+
 	return 0;
 }
 
-- 
2.20.1

