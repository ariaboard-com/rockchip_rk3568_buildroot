From 1002995dd3ad1484dfdf9dbdaa6c4df287f7b802 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Tue, 5 Nov 2019 18:15:18 +0800
Subject: [PATCH 2/2] pixman-renderer: Support linux dmabuf

NOTE: Only support contig dmabuf.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 libweston/pixman-renderer.c | 185 ++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 180 insertions(+), 5 deletions(-)

diff --git a/libweston/pixman-renderer.c b/libweston/pixman-renderer.c
index d45d18e..cd5beb9 100644
--- a/libweston/pixman-renderer.c
+++ b/libweston/pixman-renderer.c
@@ -35,6 +35,14 @@
 #include "pixman-renderer.h"
 #include "shared/helpers.h"
 
+#include <drm_fourcc.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/mman.h>
+
+#include "linux-dmabuf.h"
+#include "linux-dmabuf-unstable-v1-server-protocol.h"
+
 #include <linux/input.h>
 
 struct pixman_output_state {
@@ -351,7 +359,7 @@ repaint_region(struct weston_view *ev, struct weston_output *output,
 	else
 		filter = PIXMAN_FILTER_NEAREST;
 
-	if (ps->buffer_ref.buffer)
+	if (ps->buffer_ref.buffer && ps->buffer_ref.buffer->shm_buffer)
 		wl_shm_buffer_begin_access(ps->buffer_ref.buffer->shm_buffer);
 
 	if (ev->alpha < 1.0) {
@@ -371,7 +379,7 @@ repaint_region(struct weston_view *ev, struct weston_output *output,
 	if (mask_image)
 		pixman_image_unref(mask_image);
 
-	if (ps->buffer_ref.buffer)
+	if (ps->buffer_ref.buffer && ps->buffer_ref.buffer->shm_buffer)
 		wl_shm_buffer_end_access(ps->buffer_ref.buffer->shm_buffer);
 
 	if (pr->repaint_debug)
@@ -594,10 +602,82 @@ buffer_state_handle_buffer_destroy(struct wl_listener *listener, void *data)
 }
 
 static void
+pixman_renderer_attach_dmabuf(struct weston_surface *es,
+			      struct weston_buffer *buffer,
+			      struct linux_dmabuf_buffer *dmabuf)
+{
+	struct pixman_surface_state *ps = get_surface_state(es);
+	struct dmabuf_attributes *attributes = &dmabuf->attributes;
+	pixman_format_code_t pixman_format;
+	size_t size, vstride;
+	void *ptr;
+
+	size = lseek(attributes->fd[0], 0, SEEK_END);
+
+	ptr = mmap(NULL, size, PROT_READ, MAP_SHARED, attributes->fd[0], 0);
+	if (ptr == MAP_FAILED) {
+		weston_log("could not mmap for dmabuf: %d\n",
+			   attributes->fd[0]);
+		weston_buffer_reference(&ps->buffer_ref, NULL);
+		return;
+	}
+
+	buffer->width = attributes->width;
+	buffer->height = attributes->height;
+
+	if (attributes->n_planes == 1)
+		vstride = attributes->height;
+	else
+		vstride = (attributes->offset[1] - attributes->offset[0]) /
+			attributes->stride[0];
+
+	switch (attributes->format) {
+	case DRM_FORMAT_ARGB8888:
+		pixman_format = PIXMAN_a8r8g8b8;
+		break;
+	case DRM_FORMAT_XRGB8888:
+		pixman_format = PIXMAN_x8r8g8b8;
+		break;
+	case DRM_FORMAT_YUYV:
+		pixman_format = PIXMAN_yuy2;
+		break;
+	case DRM_FORMAT_YVU420:
+		pixman_format = PIXMAN_yv12;
+		break;
+#ifdef HAVE_PIXMAN_I420
+	case DRM_FORMAT_YUV420:
+		pixman_format = PIXMAN_i420;
+		break;
+#endif
+#ifdef HAVE_PIXMAN_NV12
+	case DRM_FORMAT_NV12:
+		pixman_format = PIXMAN_nv12;
+		break;
+#endif
+	default:
+		weston_log("Unsupported dmabuf format\n");
+		weston_buffer_reference(&ps->buffer_ref, NULL);
+		return;
+	break;
+	}
+
+	ps->image = pixman_image_create_bits(pixman_format,
+					     buffer->width, vstride,
+					     ptr + attributes->offset[0],
+					     attributes->stride[0]);
+
+	ps->buffer_destroy_listener.notify =
+		buffer_state_handle_buffer_destroy;
+	wl_signal_add(&buffer->destroy_signal,
+		      &ps->buffer_destroy_listener);
+}
+
+static void
 pixman_renderer_attach(struct weston_surface *es, struct weston_buffer *buffer)
 {
 	struct pixman_surface_state *ps = get_surface_state(es);
 	struct wl_shm_buffer *shm_buffer;
+	struct linux_dmabuf_buffer *dmabuf;
 	pixman_format_code_t pixman_format;
 
 	weston_buffer_reference(&ps->buffer_ref, buffer);
@@ -618,9 +698,14 @@ pixman_renderer_attach(struct weston_surface *es, struct weston_buffer *buffer)
 	shm_buffer = wl_shm_buffer_get(buffer->resource);
 
 	if (! shm_buffer) {
-		weston_log("Pixman renderer supports only SHM buffers\n");
-		weston_buffer_reference(&ps->buffer_ref, NULL);
-		return;
+		if ((dmabuf = linux_dmabuf_buffer_get(buffer->resource))) {
+			pixman_renderer_attach_dmabuf(es, buffer, dmabuf);
+			return;
+		} else {
+			weston_log("unhandled buffer type!\n");
+			weston_buffer_reference(&ps->buffer_ref, NULL);
+			return;
+		}
 	}
 
 	switch (wl_shm_buffer_get_format(shm_buffer)) {
@@ -737,6 +822,9 @@ pixman_renderer_create_surface(struct weston_surface *surface)
 	wl_signal_add(&pr->destroy_signal,
 		      &ps->renderer_destroy_listener);
 
+	if (surface->buffer_ref.buffer)
+		pixman_renderer_attach(surface, surface->buffer_ref.buffer);
+
 	return 0;
 }
 
@@ -840,6 +928,87 @@ debug_binding(struct weston_keyboard *keyboard, uint32_t time, uint32_t key,
 	}
 }
 
+static bool
+pixman_renderer_import_dmabuf(struct weston_compositor *ec,
+			      struct linux_dmabuf_buffer *dmabuf)
+{
+	struct dmabuf_attributes *attributes = &dmabuf->attributes;
+	size_t total_size, vstride0;
+	int i;
+
+	for (i = 0; i < attributes->n_planes; i++) {
+		if (attributes->modifier[i] != DRM_FORMAT_MOD_INVALID)
+			return false;
+	}
+
+	/* reject all flags we do not recognize or handle */
+	if (attributes->flags & ~ZWP_LINUX_BUFFER_PARAMS_V1_FLAGS_Y_INVERT)
+		return false;
+
+	if (attributes->n_planes < 0)
+		return false;
+	else if (attributes->n_planes == 1)
+		return true;
+
+	total_size = lseek(attributes->fd[0], 0, SEEK_END);
+	vstride0 = (attributes->offset[1] - attributes->offset[0]) /
+		attributes->stride[0];
+
+	for (i = 1; i < attributes->n_planes; i++) {
+		size_t size = attributes->offset[i] - attributes->offset[i - 1];
+		size_t vstride = size / attributes->stride[i - 1];
+
+		/* not contig */
+		if (size <= 0 || vstride <= 0 ||
+		    attributes->offset[i - 1] + size > total_size)
+			return false;
+
+		/* stride unmatched */
+		if ((vstride != vstride0 && vstride != vstride0 / 2) ||
+		    (attributes->stride[i] != attributes->stride[0] &&
+		     attributes->stride[i] != attributes->stride[0] / 2))
+			return false;
+	}
+
+	return true;
+}
+
+static bool
+pixman_renderer_query_dmabuf_formats(struct weston_compositor *ec,
+				     int **formats, int *num_formats)
+{
+	/* TODO: support more formats */
+	static const int dmabuf_formats[] = {
+		DRM_FORMAT_ARGB8888,
+		DRM_FORMAT_XRGB8888,
+		DRM_FORMAT_YUYV,
+		DRM_FORMAT_YVU420,
+		DRM_FORMAT_YUV420,
+		DRM_FORMAT_NV12,
+	};
+
+	*num_formats = ARRAY_LENGTH(dmabuf_formats);
+
+	*formats = calloc(*num_formats, sizeof(int));
+	if (*formats == NULL) {
+		*num_formats = 0;
+		return false;
+	}
+
+	memcpy(*formats, dmabuf_formats,
+	       ARRAY_LENGTH(dmabuf_formats) * sizeof(int));
+	return true;
+}
+
+static bool
+pixman_renderer_query_dmabuf_modifiers(struct weston_compositor *wc,
+				       int format, uint64_t **modifiers,
+				       int *num_modifiers)
+{
+	*num_modifiers = 0;
+	return true;
+}
+
 WL_EXPORT int
 pixman_renderer_init(struct weston_compositor *ec)
 {
@@ -882,6 +1051,12 @@ pixman_renderer_init(struct weston_compositor *ec)
 
 	wl_signal_init(&renderer->destroy_signal);
 
+	renderer->base.import_dmabuf = pixman_renderer_import_dmabuf;
+	renderer->base.query_dmabuf_formats =
+	    pixman_renderer_query_dmabuf_formats;
+	renderer->base.query_dmabuf_modifiers =
+	    pixman_renderer_query_dmabuf_modifiers;
+
 	return 0;
 }
 
-- 
2.11.0

